You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.

solution:
class Solution {
    public int maxOperations(int[] nums, int k)
    {
        List<Integer> nums1 = new ArrayList<>();
        for (int num : nums) {
            nums1.add(num);
        }

        int count = 0;
        int i = 0;
        while (i < nums1.size()) {
            boolean found = false;
            for (int j = i + 1; j < nums1.size(); j++) {
                if (nums1.get(i) + nums1.get(j) == k) {
                    nums1.remove(j); // Remove the element at index j first
                    nums1.remove(i); // Then remove the element at index i
                    count++;
                    found = true;
                    break;
                }
            }
            if (found) {
                i = 0; // Restart the search from the beginning
            } else {
                i++;
            }
        }

        return count;
    }
}
